// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clients {
  uuid      String         @id @default(uuid())
  name      String
  username  String         @unique
  password  String
  createdAt DateTime       @default(now())
  status    ClientStatus   @default(YES)
  logs      LogRequests[]
  cards     ClientsCards[]

  tradesSended   TradeOffer[] @relation(name: "ClientsSender")
  tradesRecieved TradeOffer[] @relation(name: "ClientsReciever")
}

enum ClientStatus {
  YES
  NOT
}

model LogRequests {
  uuid        String   @id @default(uuid())
  route       String
  method      String
  body        String?
  params      String?
  createdAt   DateTime @default(now())
  Clients     Clients? @relation(fields: [clientsUuid], references: [uuid])
  clientsUuid String?
}

model ClientsCards {
  uuid        String   @id @default(uuid())
  cardId      Int
  Clients     Clients? @relation(fields: [clientsUuid], references: [uuid])
  clientsUuid String?
  createdAt   DateTime @default(now())
}

model TradeOffer {
  uuid      String             @id @default(uuid())
  sender    String //from who went the trade
  reciever  String //to who went the trade
  status    TRADE_OFFER_STATUS
  createdAt DateTime           @default(now())

  cards           TradeOfferCards[]
  ClientsSender   Clients?          @relation(name: "ClientsSender", fields: [sender], references: [uuid])
  ClientsReciever Clients?          @relation(name: "ClientsReciever", fields: [reciever], references: [uuid])
}

model TradeOfferCards {
  uuid      String       @id @default(uuid())
  action    TRADE_ACTION
  card      Int
  createdAt DateTime     @default(now())

  TradeOffer     TradeOffer? @relation(fields: [tradeOfferUuid], references: [uuid])
  tradeOfferUuid String?
}

enum TRADE_OFFER_STATUS {
  OPEN
  ACCEPTED
  REFUSED
}

enum TRADE_ACTION {
  FROM
  TO
}
